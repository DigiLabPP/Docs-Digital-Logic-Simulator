[
    {
        "name": "2x1 MUX",
        "desc": "This block selects one from the two Data inputs based on the logic level at the Select line/Select input and passes to the output, while the other Data input which isn't selected, doesn't influence the output.",
        "truth_table": "",
        "code": "2x1_MUX D1 A D0 B S C Y D #(D1 and D0 - Data inputs), S-Select input, Y-Output, Order of the Subciruit labels doesn't matter",
        "syntax": "2x1_MUX {[Subcircuit-label-n] [label-n]}\nwhere, the Subcircuit labels are D1, D0, S and Y\nAll Subcircuit labels are mandatory\nOrder is arbitrary"
    },
    {
        "name": "4x1 MUX",
        "desc": "This block selects one from the four Data inputs, binary encoded from zero to three, based on the logic levels at the Select lines/Select inputs and passes to the output, while the other Data inputs which aren't selected, don't influence the output for that selection.",
        "truth_table": "",
        "code": "4x1_MUX D3 A D2 B D1 C D0 D S1 E S0 F Y G #Order of the Subciruit labels doesn't matter",
        "syntax": "4x1_MUX {[Subcircuit-label-n] [label-n]}\nwhere, the Subcircuit labels are D3, D2, D1, D0, S and Y\nAll Subcircuit labels are mandatory\nOrder is arbitrary"
    },
    {
        "name": "4 BIT RC Adder",
        "desc": "4-Bit Ripple Carry Adder. Consists of 4 sections of Full Adders connected in a carry-ripple fashion. Receives Addend and Augend bits with Input carry.",
        "truth_table": "",
        "code": "4BIT_RC_ADDER A3 a3 B3 b3 A2 a2 B2 b2 A1 a1 B1 b1 A0 a0 B0 b0 S3 s3 S2 s2 S1 s1 S0 s0 C_IN c1 C_OUT c2 #(A0-A3): Augend bits, (B0-B3): Addend bits, (S0-S3): Sum bits, C_IN: Input Carry, C_OUT: Output Carry",
        "syntax": "4BIT_RC_ADDER {[Subcircuit-label-n] [label-n]}\nWhere, the Subcircuit labels are A3-A0, B3-B0, S3-S0, C_IN, C_OUT"
    },
    {
        "name": "Full Adder",
        "desc": "Performs binary addition of an Augend bit with an Addend bit with an Input Carry and outputs Sum bit and Output carry.",
        "truth_table": "",
        "code": "",
        "syntax": ""
    },
    {
        "name": "Half Adder",
        "desc": "",
        "truth_table": "",
        "code": "",
        "syntax": ""
    },
    {
        "name": "4 Bit Johnshon Counter",
        "desc": "",
        "truth_table": "",
        "code": "",
        "syntax": ""
    },
    {
        "name": "4 Bit Ring Counter",
        "desc": "",
        "truth_table": "",
        "code": "",
        "syntax": ""
    },
    {
        "name": "4 Bit Ripple Counter",
        "desc": "",
        "truth_table": "",
        "code": "",
        "syntax": ""
    },
    {
        "name": "BCD Ripple Counter",
        "desc": "",
        "truth_table": "",
        "code": "",
        "syntax": ""
    },
    {
        "name": "D Flip-Flop Negative edge triggered",
        "desc": "",
        "truth_table": "",
        "code": "",
        "syntax": ""
    },
    {
        "name": "D Flip-Flop Positive edge triggered",
        "desc": "",
        "truth_table": "",
        "code": "",
        "syntax": ""
    },
    {
        "name": "D Latch Enable",
        "desc": "",
        "truth_table": "",
        "code": "",
        "syntax": ""
    },
    {
        "name": "JK Flip-Flop Negative edge triggered",
        "desc": "",
        "truth_table": "",
        "code": "",
        "syntax": ""
    },
    {
        "name": "JK Flip-Flop Negative edge triggered with Set and Reset",
        "desc": "",
        "truth_table": "",
        "code": "",
        "syntax": ""
    },
    {
        "name": "JK Flip-Flop Positive edge triggered",
        "desc": "",
        "truth_table": "",
        "code": "",
        "syntax": ""
    },
    {
        "name": "JK Flip-Flop Positive edge triggered with Set and Reset",
        "desc": "",
        "truth_table": "",
        "code": "",
        "syntax": ""
    },
    {
        "name": "JK Latch Enable",
        "desc": "",
        "truth_table": "",
        "code": "",
        "syntax": ""
    },
    {
        "name": "S'R' Latch",
        "desc": "",
        "truth_table": "",
        "code": "",
        "syntax": ""
    },
    {
        "name": "SR Latch",
        "desc": "",
        "truth_table": "",
        "code": "",
        "syntax": ""
    },
    {
        "name": "SR Latch Enable",
        "desc": "",
        "truth_table": "",
        "code": "",
        "syntax": ""
    },
    {
        "name": "T Flip-Flop Negative edge triggered",
        "desc": "",
        "truth_table": "",
        "code": "",
        "syntax": ""
    },
    {
        "name": "T Flip-Flop Positive edge triggered",
        "desc": "",
        "truth_table": "",
        "code": "",
        "syntax": ""
    },
    {
        "name": "AND Gate",
        "desc": "The output of this gate is the logical AND operation of all input signals. In the first example given, A and B are the input signal pins and C is the output pin. By default, the last pin specified in the code is taken as the output pin of the Gate. Therefore, multiple inputs (2 or above) can be given to the AND gate.",
        "truth_table": "",
        "code" :"AND A B C #Two Inputs (A,B) and Output C\n\nAND A B C d #Three Inputs (A,B,C) and Output d", 
        "syntax" : "AND [input labels seperated by space] [output label]"
    },
    {
        "name": "NAND Gate",
        "desc": "The output of this gate is the logical NAND operation of all input signals. In the first example given, A and B are the input signal pins and C is the output pin. By default, the last pin specified in the code is taken as the output pin of the Gate. Therefore, multiple inputs (2 or above) can be given to the NAND gate.",
        "truth_table": "",
        "code": "NAND A B C #Two Inputs (A,B) and Output C\n\nNAND A B C d #Three Inputs (A,B,C) and Output d",
        "syntax": "NAND [input labels seperated by space] [output label]"
    },
    {
        "name": "NOR Gate",
        "desc": "The output of this gate is the logical NOR operation of all input signals. In the first example given, A and B are the input signal pins and C is the output pin. By default, the last pin specified in the code is taken as the output pin of the Gate. Therefore, multiple inputs (2 or above) can be given to the NOR gate.",
        "truth_table": "",
        "code": "NOR A B C #Two Inputs (A,B) and Output C\n\nNOR A B C d #Three Inputs (A,B,C) and Output d",
        "syntax": "NOR [input labels seperated by space] [output label]"
    },
    {
        "name": "NOT Gate",
        "desc": "NOT gate can be used to invert the digital logic of a given input signal (Logic high becomes Logic Low and vice-versa). Therefore, NOT Gate only has one input (A pin in example) and one output pin (B pin in example).",
        "truth_table": "",
        "code": "NOT A B",
        "syntax": "NOT [input label] [output label]"
    },
    {
        "name": "OR Gate",
        "desc": "The output of this gate is the logical OR operation of all input signals. In the first example given, A and B are the input signal pins and C is the output pin. By default, the last pin specified in the code is taken as the output pin of the Gate. Therefore, multiple inputs (2 or above) can be given to the OR gate.",
        "truth_table": "",
        "code": "OR A B C #Two Inputs (A,B) and Output C\n\nOR A B C d #Three Inputs (A,B,C) and Output d",
        "syntax": "OR [input labels seperated by space] [output label]"
    },
    {
        "name": "XOR Gate",
        "desc": "The output of this gate is the logical XOR operation of all input signals. In the first example given, A and B are the input signal pins and C is the output pin. By default, the last pin specified in the code is taken as the output pin of the Gate. Therefore, multiple inputs (2 or above) can be given to the XOR gate.",
        "truth_table": "",
        "code": "XOR A B C #Two Inputs (A,B) and Output C\n\nXOR A B C d #Three Inputs (A,B,C) and Output d",
        "syntax": "XOR [input labels seperated by space] [output label]"
    }
]
